// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package CommentHBRepositoryMocks is a generated GoMock package.
package CommentHBRepositoryMocks

import (
	context "context"
	model "github.com/TremblingV5/DouTok/applications/comment/dal/hbModel"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockIRepository) List(ctx context.Context, videoId int64) ([]*model.CommentInHB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, videoId)
	ret0, _ := ret[0].([]*model.CommentInHB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIRepositoryMockRecorder) List(ctx, videoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIRepository)(nil).List), ctx, videoId)
}

// Remove mocks base method.
func (m *MockIRepository) Remove(ctx context.Context, videoId, conversationId int64, timestamp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, videoId, conversationId, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockIRepositoryMockRecorder) Remove(ctx, videoId, conversationId, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockIRepository)(nil).Remove), ctx, videoId, conversationId, timestamp)
}

// Save mocks base method.
func (m *MockIRepository) Save(ctx context.Context, commentId, videoId, userId, conversationId, lastId, toUserId int64, content, timestamp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, commentId, videoId, userId, conversationId, lastId, toUserId, content, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIRepositoryMockRecorder) Save(ctx, commentId, videoId, userId, conversationId, lastId, toUserId, content, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIRepository)(nil).Save), ctx, commentId, videoId, userId, conversationId, lastId, toUserId, content, timestamp)
}
