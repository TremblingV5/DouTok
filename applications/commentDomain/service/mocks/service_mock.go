// Code generated by MockGen. DO NOT EDIT.
// Source: typedef.go

// Package CommentServiceMocks is a generated GoMock package.
package CommentServiceMocks

import (
	context "context"
	"github.com/TremblingV5/DouTok/applications/commentDomain/dal/hbModel"
	reflect "reflect"

	model "github.com/TremblingV5/DouTok/applications/commentDomain/dal/model"
	entity "github.com/TremblingV5/DouTok/kitex_gen/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockcommentRepository is a mock of commentRepository interface.
type MockcommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockcommentRepositoryMockRecorder
}

// MockcommentRepositoryMockRecorder is the mock recorder for MockcommentRepository.
type MockcommentRepositoryMockRecorder struct {
	mock *MockcommentRepository
}

// NewMockcommentRepository creates a new mock instance.
func NewMockcommentRepository(ctrl *gomock.Controller) *MockcommentRepository {
	mock := &MockcommentRepository{ctrl: ctrl}
	mock.recorder = &MockcommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcommentRepository) EXPECT() *MockcommentRepositoryMockRecorder {
	return m.recorder
}

// IsCommentFromUser mocks base method.
func (m *MockcommentRepository) IsCommentFromUser(ctx context.Context, userId, commentId int64) (*model.Comment, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCommentFromUser", ctx, userId, commentId)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IsCommentFromUser indicates an expected call of IsCommentFromUser.
func (mr *MockcommentRepositoryMockRecorder) IsCommentFromUser(ctx, userId, commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCommentFromUser", reflect.TypeOf((*MockcommentRepository)(nil).IsCommentFromUser), ctx, userId, commentId)
}

// Remove mocks base method.
func (m *MockcommentRepository) Remove(ctx context.Context, commentId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, commentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockcommentRepositoryMockRecorder) Remove(ctx, commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockcommentRepository)(nil).Remove), ctx, commentId)
}

// Save mocks base method.
func (m *MockcommentRepository) Save(ctx context.Context, commentId, videoId, userId, conversationId, lastId, toUserId int64, content, timestamp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, commentId, videoId, userId, conversationId, lastId, toUserId, content, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockcommentRepositoryMockRecorder) Save(ctx, commentId, videoId, userId, conversationId, lastId, toUserId, content, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockcommentRepository)(nil).Save), ctx, commentId, videoId, userId, conversationId, lastId, toUserId, content, timestamp)
}

// MockcommentHBaseRepository is a mock of commentHBaseRepository interface.
type MockcommentHBaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockcommentHBaseRepositoryMockRecorder
}

// MockcommentHBaseRepositoryMockRecorder is the mock recorder for MockcommentHBaseRepository.
type MockcommentHBaseRepositoryMockRecorder struct {
	mock *MockcommentHBaseRepository
}

// NewMockcommentHBaseRepository creates a new mock instance.
func NewMockcommentHBaseRepository(ctrl *gomock.Controller) *MockcommentHBaseRepository {
	mock := &MockcommentHBaseRepository{ctrl: ctrl}
	mock.recorder = &MockcommentHBaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcommentHBaseRepository) EXPECT() *MockcommentHBaseRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockcommentHBaseRepository) List(ctx context.Context, videoId int64) ([]*hbModel.CommentInHB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, videoId)
	ret0, _ := ret[0].([]*hbModel.CommentInHB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockcommentHBaseRepositoryMockRecorder) List(ctx, videoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockcommentHBaseRepository)(nil).List), ctx, videoId)
}

// Remove mocks base method.
func (m *MockcommentHBaseRepository) Remove(ctx context.Context, videoId, conversationId int64, timestamp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, videoId, conversationId, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockcommentHBaseRepositoryMockRecorder) Remove(ctx, videoId, conversationId, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockcommentHBaseRepository)(nil).Remove), ctx, videoId, conversationId, timestamp)
}

// Save mocks base method.
func (m *MockcommentHBaseRepository) Save(ctx context.Context, commentId, videoId, userId, conversationId, lastId, toUserId int64, content, timestamp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, commentId, videoId, userId, conversationId, lastId, toUserId, content, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockcommentHBaseRepositoryMockRecorder) Save(ctx, commentId, videoId, userId, conversationId, lastId, toUserId, content, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockcommentHBaseRepository)(nil).Save), ctx, commentId, videoId, userId, conversationId, lastId, toUserId, content, timestamp)
}

// MockcommentCntRepository is a mock of commentCntRepository interface.
type MockcommentCntRepository struct {
	ctrl     *gomock.Controller
	recorder *MockcommentCntRepositoryMockRecorder
}

// MockcommentCntRepositoryMockRecorder is the mock recorder for MockcommentCntRepository.
type MockcommentCntRepositoryMockRecorder struct {
	mock *MockcommentCntRepository
}

// NewMockcommentCntRepository creates a new mock instance.
func NewMockcommentCntRepository(ctrl *gomock.Controller) *MockcommentCntRepository {
	mock := &MockcommentCntRepository{ctrl: ctrl}
	mock.recorder = &MockcommentCntRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcommentCntRepository) EXPECT() *MockcommentCntRepositoryMockRecorder {
	return m.recorder
}

// GetCommentsCount mocks base method.
func (m *MockcommentCntRepository) GetCommentsCount(ctx context.Context, videoIdList ...int64) (map[int64]int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range videoIdList {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommentsCount", varargs...)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsCount indicates an expected call of GetCommentsCount.
func (mr *MockcommentCntRepositoryMockRecorder) GetCommentsCount(ctx interface{}, videoIdList ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, videoIdList...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsCount", reflect.TypeOf((*MockcommentCntRepository)(nil).GetCommentsCount), varargs...)
}

// UpdateCommentsCount mocks base method.
func (m *MockcommentCntRepository) UpdateCommentsCount(ctx context.Context, videoIdList ...int64) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range videoIdList {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCommentsCount", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCommentsCount indicates an expected call of UpdateCommentsCount.
func (mr *MockcommentCntRepositoryMockRecorder) UpdateCommentsCount(ctx interface{}, videoIdList ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, videoIdList...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommentsCount", reflect.TypeOf((*MockcommentCntRepository)(nil).UpdateCommentsCount), varargs...)
}

// MockCommentCntCache is a mock of CommentCntCache interface.
type MockCommentCntCache struct {
	ctrl     *gomock.Controller
	recorder *MockCommentCntCacheMockRecorder
}

// MockCommentCntCacheMockRecorder is the mock recorder for MockCommentCntCache.
type MockCommentCntCacheMockRecorder struct {
	mock *MockCommentCntCache
}

// NewMockCommentCntCache creates a new mock instance.
func NewMockCommentCntCache(ctrl *gomock.Controller) *MockCommentCntCache {
	mock := &MockCommentCntCache{ctrl: ctrl}
	mock.recorder = &MockCommentCntCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentCntCache) EXPECT() *MockCommentCntCacheMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCommentCntCache) Add(videoId, modification int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", videoId, modification)
}

// Add indicates an expected call of Add.
func (mr *MockCommentCntCacheMockRecorder) Add(videoId, modification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCommentCntCache)(nil).Add), videoId, modification)
}

// Clear mocks base method.
func (m *MockCommentCntCache) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockCommentCntCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockCommentCntCache)(nil).Clear))
}

// Get mocks base method.
func (m *MockCommentCntCache) Get(videoId int64) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", videoId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCommentCntCacheMockRecorder) Get(videoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommentCntCache)(nil).Get), videoId)
}

// GetAll mocks base method.
func (m *MockCommentCntCache) GetAll() map[int64]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(map[int64]int64)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCommentCntCacheMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCommentCntCache)(nil).GetAll))
}

// MockCommentTotalCountCache is a mock of CommentTotalCountCache interface.
type MockCommentTotalCountCache struct {
	ctrl     *gomock.Controller
	recorder *MockCommentTotalCountCacheMockRecorder
}

// MockCommentTotalCountCacheMockRecorder is the mock recorder for MockCommentTotalCountCache.
type MockCommentTotalCountCacheMockRecorder struct {
	mock *MockCommentTotalCountCache
}

// NewMockCommentTotalCountCache creates a new mock instance.
func NewMockCommentTotalCountCache(ctrl *gomock.Controller) *MockCommentTotalCountCache {
	mock := &MockCommentTotalCountCache{ctrl: ctrl}
	mock.recorder = &MockCommentTotalCountCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentTotalCountCache) EXPECT() *MockCommentTotalCountCacheMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockCommentTotalCountCache) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockCommentTotalCountCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockCommentTotalCountCache)(nil).Clear))
}

// Get mocks base method.
func (m *MockCommentTotalCountCache) Get(videoId int64) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", videoId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCommentTotalCountCacheMockRecorder) Get(videoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommentTotalCountCache)(nil).Get), videoId)
}

// Set mocks base method.
func (m *MockCommentTotalCountCache) Set(videoId, count int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", videoId, count)
}

// Set indicates an expected call of Set.
func (mr *MockCommentTotalCountCacheMockRecorder) Set(videoId, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCommentTotalCountCache)(nil).Set), videoId, count)
}

// SetBatch mocks base method.
func (m *MockCommentTotalCountCache) SetBatch(batch map[int64]int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBatch", batch)
}

// SetBatch indicates an expected call of SetBatch.
func (mr *MockCommentTotalCountCacheMockRecorder) SetBatch(batch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBatch", reflect.TypeOf((*MockCommentTotalCountCache)(nil).SetBatch), batch)
}

// MockCommentTotalCountRedis is a mock of CommentTotalCountRedis interface.
type MockCommentTotalCountRedis struct {
	ctrl     *gomock.Controller
	recorder *MockCommentTotalCountRedisMockRecorder
}

// MockCommentTotalCountRedisMockRecorder is the mock recorder for MockCommentTotalCountRedis.
type MockCommentTotalCountRedisMockRecorder struct {
	mock *MockCommentTotalCountRedis
}

// NewMockCommentTotalCountRedis creates a new mock instance.
func NewMockCommentTotalCountRedis(ctrl *gomock.Controller) *MockCommentTotalCountRedis {
	mock := &MockCommentTotalCountRedis{ctrl: ctrl}
	mock.recorder = &MockCommentTotalCountRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentTotalCountRedis) EXPECT() *MockCommentTotalCountRedisMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCommentTotalCountRedis) Delete(ctx context.Context, videoId ...int64) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range videoId {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentTotalCountRedisMockRecorder) Delete(ctx interface{}, videoId ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, videoId...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentTotalCountRedis)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockCommentTotalCountRedis) Get(ctx context.Context, videoId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, videoId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCommentTotalCountRedisMockRecorder) Get(ctx, videoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommentTotalCountRedis)(nil).Get), ctx, videoId)
}

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockIService) AddComment(ctx context.Context, videoId, userId, conversationId, lastId, toUserId int64, content string) (*entity.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", ctx, videoId, userId, conversationId, lastId, toUserId, content)
	ret0, _ := ret[0].(*entity.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockIServiceMockRecorder) AddComment(ctx, videoId, userId, conversationId, lastId, toUserId, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockIService)(nil).AddComment), ctx, videoId, userId, conversationId, lastId, toUserId, content)
}

// CountComments mocks base method.
func (m *MockIService) CountComments(ctx context.Context, videoId ...int64) (map[int64]int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range videoId {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountComments", varargs...)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountComments indicates an expected call of CountComments.
func (mr *MockIServiceMockRecorder) CountComments(ctx interface{}, videoId ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, videoId...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountComments", reflect.TypeOf((*MockIService)(nil).CountComments), varargs...)
}

// ListComment mocks base method.
func (m *MockIService) ListComment(ctx context.Context, videoId int64) ([]*hbModel.CommentInHB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComment", ctx, videoId)
	ret0, _ := ret[0].([]*hbModel.CommentInHB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComment indicates an expected call of ListComment.
func (mr *MockIServiceMockRecorder) ListComment(ctx, videoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComment", reflect.TypeOf((*MockIService)(nil).ListComment), ctx, videoId)
}

// RemoveComment mocks base method.
func (m *MockIService) RemoveComment(ctx context.Context, userId, commentId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveComment", ctx, userId, commentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveComment indicates an expected call of RemoveComment.
func (mr *MockIServiceMockRecorder) RemoveComment(ctx, userId, commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveComment", reflect.TypeOf((*MockIService)(nil).RemoveComment), ctx, userId, commentId)
}
