// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package CommentCountRepositoryMocks is a generated GoMock package.
package CommentCountRepositoryMocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// GetCommentsCount mocks base method.
func (m *MockIRepository) GetCommentsCount(ctx context.Context, videoIdList ...int64) (map[int64]int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range videoIdList {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommentsCount", varargs...)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsCount indicates an expected call of GetCommentsCount.
func (mr *MockIRepositoryMockRecorder) GetCommentsCount(ctx interface{}, videoIdList ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, videoIdList...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsCount", reflect.TypeOf((*MockIRepository)(nil).GetCommentsCount), varargs...)
}

// UpdateCommentsCount mocks base method.
func (m *MockIRepository) UpdateCommentsCount(ctx context.Context, videoIdList ...int64) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range videoIdList {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCommentsCount", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCommentsCount indicates an expected call of UpdateCommentsCount.
func (mr *MockIRepositoryMockRecorder) UpdateCommentsCount(ctx interface{}, videoIdList ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, videoIdList...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommentsCount", reflect.TypeOf((*MockIRepository)(nil).UpdateCommentsCount), varargs...)
}
