// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TremblingV5/DouTok/applications/videoDomain/dal/model"
)

func newVideoCount(db *gorm.DB, opts ...gen.DOOption) videoCount {
	_videoCount := videoCount{}

	_videoCount.videoCountDo.UseDB(db, opts...)
	_videoCount.videoCountDo.UseModel(&model.VideoCount{})

	tableName := _videoCount.videoCountDo.TableName()
	_videoCount.ALL = field.NewAsterisk(tableName)
	_videoCount.Id = field.NewUint64(tableName, "id")
	_videoCount.UserId = field.NewUint64(tableName, "user_id")
	_videoCount.PublishCount = field.NewInt64(tableName, "publish_count")

	_videoCount.fillFieldMap()

	return _videoCount
}

type videoCount struct {
	videoCountDo

	ALL          field.Asterisk
	Id           field.Uint64
	UserId       field.Uint64
	PublishCount field.Int64

	fieldMap map[string]field.Expr
}

func (v videoCount) Table(newTableName string) *videoCount {
	v.videoCountDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v videoCount) As(alias string) *videoCount {
	v.videoCountDo.DO = *(v.videoCountDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *videoCount) updateTableName(table string) *videoCount {
	v.ALL = field.NewAsterisk(table)
	v.Id = field.NewUint64(table, "id")
	v.UserId = field.NewUint64(table, "user_id")
	v.PublishCount = field.NewInt64(table, "publish_count")

	v.fillFieldMap()

	return v
}

func (v *videoCount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *videoCount) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 3)
	v.fieldMap["id"] = v.Id
	v.fieldMap["user_id"] = v.UserId
	v.fieldMap["publish_count"] = v.PublishCount
}

func (v videoCount) clone(db *gorm.DB) videoCount {
	v.videoCountDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v videoCount) replaceDB(db *gorm.DB) videoCount {
	v.videoCountDo.ReplaceDB(db)
	return v
}

type videoCountDo struct{ gen.DO }

type IVideoCountDo interface {
	gen.SubQuery
	Debug() IVideoCountDo
	WithContext(ctx context.Context) IVideoCountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVideoCountDo
	WriteDB() IVideoCountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVideoCountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVideoCountDo
	Not(conds ...gen.Condition) IVideoCountDo
	Or(conds ...gen.Condition) IVideoCountDo
	Select(conds ...field.Expr) IVideoCountDo
	Where(conds ...gen.Condition) IVideoCountDo
	Order(conds ...field.Expr) IVideoCountDo
	Distinct(cols ...field.Expr) IVideoCountDo
	Omit(cols ...field.Expr) IVideoCountDo
	Join(table schema.Tabler, on ...field.Expr) IVideoCountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVideoCountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVideoCountDo
	Group(cols ...field.Expr) IVideoCountDo
	Having(conds ...gen.Condition) IVideoCountDo
	Limit(limit int) IVideoCountDo
	Offset(offset int) IVideoCountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoCountDo
	Unscoped() IVideoCountDo
	Create(values ...*model.VideoCount) error
	CreateInBatches(values []*model.VideoCount, batchSize int) error
	Save(values ...*model.VideoCount) error
	First() (*model.VideoCount, error)
	Take() (*model.VideoCount, error)
	Last() (*model.VideoCount, error)
	Find() ([]*model.VideoCount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoCount, err error)
	FindInBatches(result *[]*model.VideoCount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VideoCount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVideoCountDo
	Assign(attrs ...field.AssignExpr) IVideoCountDo
	Joins(fields ...field.RelationField) IVideoCountDo
	Preload(fields ...field.RelationField) IVideoCountDo
	FirstOrInit() (*model.VideoCount, error)
	FirstOrCreate() (*model.VideoCount, error)
	FindByPage(offset int, limit int) (result []*model.VideoCount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVideoCountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v videoCountDo) Debug() IVideoCountDo {
	return v.withDO(v.DO.Debug())
}

func (v videoCountDo) WithContext(ctx context.Context) IVideoCountDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v videoCountDo) ReadDB() IVideoCountDo {
	return v.Clauses(dbresolver.Read)
}

func (v videoCountDo) WriteDB() IVideoCountDo {
	return v.Clauses(dbresolver.Write)
}

func (v videoCountDo) Session(config *gorm.Session) IVideoCountDo {
	return v.withDO(v.DO.Session(config))
}

func (v videoCountDo) Clauses(conds ...clause.Expression) IVideoCountDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v videoCountDo) Returning(value interface{}, columns ...string) IVideoCountDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v videoCountDo) Not(conds ...gen.Condition) IVideoCountDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v videoCountDo) Or(conds ...gen.Condition) IVideoCountDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v videoCountDo) Select(conds ...field.Expr) IVideoCountDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v videoCountDo) Where(conds ...gen.Condition) IVideoCountDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v videoCountDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IVideoCountDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v videoCountDo) Order(conds ...field.Expr) IVideoCountDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v videoCountDo) Distinct(cols ...field.Expr) IVideoCountDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v videoCountDo) Omit(cols ...field.Expr) IVideoCountDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v videoCountDo) Join(table schema.Tabler, on ...field.Expr) IVideoCountDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v videoCountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVideoCountDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v videoCountDo) RightJoin(table schema.Tabler, on ...field.Expr) IVideoCountDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v videoCountDo) Group(cols ...field.Expr) IVideoCountDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v videoCountDo) Having(conds ...gen.Condition) IVideoCountDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v videoCountDo) Limit(limit int) IVideoCountDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v videoCountDo) Offset(offset int) IVideoCountDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v videoCountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoCountDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v videoCountDo) Unscoped() IVideoCountDo {
	return v.withDO(v.DO.Unscoped())
}

func (v videoCountDo) Create(values ...*model.VideoCount) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v videoCountDo) CreateInBatches(values []*model.VideoCount, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v videoCountDo) Save(values ...*model.VideoCount) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v videoCountDo) First() (*model.VideoCount, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoCount), nil
	}
}

func (v videoCountDo) Take() (*model.VideoCount, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoCount), nil
	}
}

func (v videoCountDo) Last() (*model.VideoCount, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoCount), nil
	}
}

func (v videoCountDo) Find() ([]*model.VideoCount, error) {
	result, err := v.DO.Find()
	return result.([]*model.VideoCount), err
}

func (v videoCountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoCount, err error) {
	buf := make([]*model.VideoCount, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v videoCountDo) FindInBatches(result *[]*model.VideoCount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v videoCountDo) Attrs(attrs ...field.AssignExpr) IVideoCountDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v videoCountDo) Assign(attrs ...field.AssignExpr) IVideoCountDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v videoCountDo) Joins(fields ...field.RelationField) IVideoCountDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v videoCountDo) Preload(fields ...field.RelationField) IVideoCountDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v videoCountDo) FirstOrInit() (*model.VideoCount, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoCount), nil
	}
}

func (v videoCountDo) FirstOrCreate() (*model.VideoCount, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoCount), nil
	}
}

func (v videoCountDo) FindByPage(offset int, limit int) (result []*model.VideoCount, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v videoCountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v videoCountDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v videoCountDo) Delete(models ...*model.VideoCount) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *videoCountDo) withDO(do gen.Dao) *videoCountDo {
	v.DO = *do.(*gen.DO)
	return v
}
