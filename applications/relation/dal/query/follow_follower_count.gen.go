// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TremblingV5/DouTok/applications/relation/dal/model"
)

func newFollowFollowerCount(db *gorm.DB, opts ...gen.DOOption) followFollowerCount {
	_followFollowerCount := followFollowerCount{}

	_followFollowerCount.followFollowerCountDo.UseDB(db, opts...)
	_followFollowerCount.followFollowerCountDo.UseModel(&model.FollowFollowerCount{})

	tableName := _followFollowerCount.followFollowerCountDo.TableName()
	_followFollowerCount.ALL = field.NewAsterisk(tableName)
	_followFollowerCount.ID = field.NewInt64(tableName, "id")
	_followFollowerCount.UserID = field.NewInt64(tableName, "user_id")
	_followFollowerCount.FollowCount = field.NewInt64(tableName, "follow_count")
	_followFollowerCount.FollowerCount = field.NewInt64(tableName, "follower_count")

	_followFollowerCount.fillFieldMap()

	return _followFollowerCount
}

type followFollowerCount struct {
	followFollowerCountDo

	ALL           field.Asterisk
	ID            field.Int64
	UserID        field.Int64
	FollowCount   field.Int64
	FollowerCount field.Int64

	fieldMap map[string]field.Expr
}

func (f followFollowerCount) Table(newTableName string) *followFollowerCount {
	f.followFollowerCountDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f followFollowerCount) As(alias string) *followFollowerCount {
	f.followFollowerCountDo.DO = *(f.followFollowerCountDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *followFollowerCount) updateTableName(table string) *followFollowerCount {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.UserID = field.NewInt64(table, "user_id")
	f.FollowCount = field.NewInt64(table, "follow_count")
	f.FollowerCount = field.NewInt64(table, "follower_count")

	f.fillFieldMap()

	return f
}

func (f *followFollowerCount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *followFollowerCount) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 4)
	f.fieldMap["id"] = f.ID
	f.fieldMap["user_id"] = f.UserID
	f.fieldMap["follow_count"] = f.FollowCount
	f.fieldMap["follower_count"] = f.FollowerCount
}

func (f followFollowerCount) clone(db *gorm.DB) followFollowerCount {
	f.followFollowerCountDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f followFollowerCount) replaceDB(db *gorm.DB) followFollowerCount {
	f.followFollowerCountDo.ReplaceDB(db)
	return f
}

type followFollowerCountDo struct{ gen.DO }

type IFollowFollowerCountDo interface {
	gen.SubQuery
	Debug() IFollowFollowerCountDo
	WithContext(ctx context.Context) IFollowFollowerCountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFollowFollowerCountDo
	WriteDB() IFollowFollowerCountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFollowFollowerCountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFollowFollowerCountDo
	Not(conds ...gen.Condition) IFollowFollowerCountDo
	Or(conds ...gen.Condition) IFollowFollowerCountDo
	Select(conds ...field.Expr) IFollowFollowerCountDo
	Where(conds ...gen.Condition) IFollowFollowerCountDo
	Order(conds ...field.Expr) IFollowFollowerCountDo
	Distinct(cols ...field.Expr) IFollowFollowerCountDo
	Omit(cols ...field.Expr) IFollowFollowerCountDo
	Join(table schema.Tabler, on ...field.Expr) IFollowFollowerCountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFollowFollowerCountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFollowFollowerCountDo
	Group(cols ...field.Expr) IFollowFollowerCountDo
	Having(conds ...gen.Condition) IFollowFollowerCountDo
	Limit(limit int) IFollowFollowerCountDo
	Offset(offset int) IFollowFollowerCountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFollowFollowerCountDo
	Unscoped() IFollowFollowerCountDo
	Create(values ...*model.FollowFollowerCount) error
	CreateInBatches(values []*model.FollowFollowerCount, batchSize int) error
	Save(values ...*model.FollowFollowerCount) error
	First() (*model.FollowFollowerCount, error)
	Take() (*model.FollowFollowerCount, error)
	Last() (*model.FollowFollowerCount, error)
	Find() ([]*model.FollowFollowerCount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FollowFollowerCount, err error)
	FindInBatches(result *[]*model.FollowFollowerCount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FollowFollowerCount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFollowFollowerCountDo
	Assign(attrs ...field.AssignExpr) IFollowFollowerCountDo
	Joins(fields ...field.RelationField) IFollowFollowerCountDo
	Preload(fields ...field.RelationField) IFollowFollowerCountDo
	FirstOrInit() (*model.FollowFollowerCount, error)
	FirstOrCreate() (*model.FollowFollowerCount, error)
	FindByPage(offset int, limit int) (result []*model.FollowFollowerCount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFollowFollowerCountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	QueryWihtUserId(user_id int64) (result model.FollowFollowerCount, err error)
	AddFollowCount(id int64) (err error)
	AddFollowerCount(id int64) (err error)
	DecrFollowCount(id int64) (err error)
	DecrFollowerCount(id int64) (err error)
}

// select * from @@table where user_id = @user_id
func (f followFollowerCountDo) QueryWihtUserId(user_id int64) (result model.FollowFollowerCount, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, user_id)
	generateSQL.WriteString("select * from follow_follower_count where user_id = ? ")

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// update follow_follower_count set follow_count = follow_count+1 where user_id = @id
func (f followFollowerCountDo) AddFollowCount(id int64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("update follow_follower_count set follow_count = follow_count+1 where user_id = ? ")

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// update follow_follower_count set follower_count = follower_count+1 where user_id = @id
func (f followFollowerCountDo) AddFollowerCount(id int64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("update follow_follower_count set follower_count = follower_count+1 where user_id = ? ")

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// update follow_follower_count set follow_count = follow_count-1 where user_id = @id
func (f followFollowerCountDo) DecrFollowCount(id int64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("update follow_follower_count set follow_count = follow_count-1 where user_id = ? ")

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// update follow_follower_count set follower_count = follower_count-1 where user_id = @id
func (f followFollowerCountDo) DecrFollowerCount(id int64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("update follow_follower_count set follower_count = follower_count-1 where user_id = ? ")

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (f followFollowerCountDo) Debug() IFollowFollowerCountDo {
	return f.withDO(f.DO.Debug())
}

func (f followFollowerCountDo) WithContext(ctx context.Context) IFollowFollowerCountDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f followFollowerCountDo) ReadDB() IFollowFollowerCountDo {
	return f.Clauses(dbresolver.Read)
}

func (f followFollowerCountDo) WriteDB() IFollowFollowerCountDo {
	return f.Clauses(dbresolver.Write)
}

func (f followFollowerCountDo) Session(config *gorm.Session) IFollowFollowerCountDo {
	return f.withDO(f.DO.Session(config))
}

func (f followFollowerCountDo) Clauses(conds ...clause.Expression) IFollowFollowerCountDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f followFollowerCountDo) Returning(value interface{}, columns ...string) IFollowFollowerCountDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f followFollowerCountDo) Not(conds ...gen.Condition) IFollowFollowerCountDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f followFollowerCountDo) Or(conds ...gen.Condition) IFollowFollowerCountDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f followFollowerCountDo) Select(conds ...field.Expr) IFollowFollowerCountDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f followFollowerCountDo) Where(conds ...gen.Condition) IFollowFollowerCountDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f followFollowerCountDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFollowFollowerCountDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f followFollowerCountDo) Order(conds ...field.Expr) IFollowFollowerCountDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f followFollowerCountDo) Distinct(cols ...field.Expr) IFollowFollowerCountDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f followFollowerCountDo) Omit(cols ...field.Expr) IFollowFollowerCountDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f followFollowerCountDo) Join(table schema.Tabler, on ...field.Expr) IFollowFollowerCountDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f followFollowerCountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFollowFollowerCountDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f followFollowerCountDo) RightJoin(table schema.Tabler, on ...field.Expr) IFollowFollowerCountDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f followFollowerCountDo) Group(cols ...field.Expr) IFollowFollowerCountDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f followFollowerCountDo) Having(conds ...gen.Condition) IFollowFollowerCountDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f followFollowerCountDo) Limit(limit int) IFollowFollowerCountDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f followFollowerCountDo) Offset(offset int) IFollowFollowerCountDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f followFollowerCountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFollowFollowerCountDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f followFollowerCountDo) Unscoped() IFollowFollowerCountDo {
	return f.withDO(f.DO.Unscoped())
}

func (f followFollowerCountDo) Create(values ...*model.FollowFollowerCount) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f followFollowerCountDo) CreateInBatches(values []*model.FollowFollowerCount, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f followFollowerCountDo) Save(values ...*model.FollowFollowerCount) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f followFollowerCountDo) First() (*model.FollowFollowerCount, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowFollowerCount), nil
	}
}

func (f followFollowerCountDo) Take() (*model.FollowFollowerCount, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowFollowerCount), nil
	}
}

func (f followFollowerCountDo) Last() (*model.FollowFollowerCount, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowFollowerCount), nil
	}
}

func (f followFollowerCountDo) Find() ([]*model.FollowFollowerCount, error) {
	result, err := f.DO.Find()
	return result.([]*model.FollowFollowerCount), err
}

func (f followFollowerCountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FollowFollowerCount, err error) {
	buf := make([]*model.FollowFollowerCount, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f followFollowerCountDo) FindInBatches(result *[]*model.FollowFollowerCount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f followFollowerCountDo) Attrs(attrs ...field.AssignExpr) IFollowFollowerCountDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f followFollowerCountDo) Assign(attrs ...field.AssignExpr) IFollowFollowerCountDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f followFollowerCountDo) Joins(fields ...field.RelationField) IFollowFollowerCountDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f followFollowerCountDo) Preload(fields ...field.RelationField) IFollowFollowerCountDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f followFollowerCountDo) FirstOrInit() (*model.FollowFollowerCount, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowFollowerCount), nil
	}
}

func (f followFollowerCountDo) FirstOrCreate() (*model.FollowFollowerCount, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowFollowerCount), nil
	}
}

func (f followFollowerCountDo) FindByPage(offset int, limit int) (result []*model.FollowFollowerCount, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f followFollowerCountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f followFollowerCountDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f followFollowerCountDo) Delete(models ...*model.FollowFollowerCount) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *followFollowerCountDo) withDO(do gen.Dao) *followFollowerCountDo {
	f.DO = *do.(*gen.DO)
	return f
}
