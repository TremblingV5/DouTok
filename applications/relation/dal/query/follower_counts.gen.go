// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TremblingV5/DouTok/applications/relation/dal/model"
)

func newFollowerCount(db *gorm.DB, opts ...gen.DOOption) followerCount {
	_followerCount := followerCount{}

	_followerCount.followerCountDo.UseDB(db, opts...)
	_followerCount.followerCountDo.UseModel(&model.FollowerCount{})

	tableName := _followerCount.followerCountDo.TableName()
	_followerCount.ALL = field.NewAsterisk(tableName)
	_followerCount.UserId = field.NewInt64(tableName, "user_id")
	_followerCount.Number = field.NewInt64(tableName, "number")
	_followerCount.CreatedAt = field.NewTime(tableName, "created_at")
	_followerCount.UpdatedAt = field.NewTime(tableName, "updated_at")

	_followerCount.fillFieldMap()

	return _followerCount
}

type followerCount struct {
	followerCountDo

	ALL       field.Asterisk
	UserId    field.Int64
	Number    field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (f followerCount) Table(newTableName string) *followerCount {
	f.followerCountDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f followerCount) As(alias string) *followerCount {
	f.followerCountDo.DO = *(f.followerCountDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *followerCount) updateTableName(table string) *followerCount {
	f.ALL = field.NewAsterisk(table)
	f.UserId = field.NewInt64(table, "user_id")
	f.Number = field.NewInt64(table, "number")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *followerCount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *followerCount) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 4)
	f.fieldMap["user_id"] = f.UserId
	f.fieldMap["number"] = f.Number
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f followerCount) clone(db *gorm.DB) followerCount {
	f.followerCountDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f followerCount) replaceDB(db *gorm.DB) followerCount {
	f.followerCountDo.ReplaceDB(db)
	return f
}

type followerCountDo struct{ gen.DO }

type IFollowerCountDo interface {
	gen.SubQuery
	Debug() IFollowerCountDo
	WithContext(ctx context.Context) IFollowerCountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFollowerCountDo
	WriteDB() IFollowerCountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFollowerCountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFollowerCountDo
	Not(conds ...gen.Condition) IFollowerCountDo
	Or(conds ...gen.Condition) IFollowerCountDo
	Select(conds ...field.Expr) IFollowerCountDo
	Where(conds ...gen.Condition) IFollowerCountDo
	Order(conds ...field.Expr) IFollowerCountDo
	Distinct(cols ...field.Expr) IFollowerCountDo
	Omit(cols ...field.Expr) IFollowerCountDo
	Join(table schema.Tabler, on ...field.Expr) IFollowerCountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFollowerCountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFollowerCountDo
	Group(cols ...field.Expr) IFollowerCountDo
	Having(conds ...gen.Condition) IFollowerCountDo
	Limit(limit int) IFollowerCountDo
	Offset(offset int) IFollowerCountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFollowerCountDo
	Unscoped() IFollowerCountDo
	Create(values ...*model.FollowerCount) error
	CreateInBatches(values []*model.FollowerCount, batchSize int) error
	Save(values ...*model.FollowerCount) error
	First() (*model.FollowerCount, error)
	Take() (*model.FollowerCount, error)
	Last() (*model.FollowerCount, error)
	Find() ([]*model.FollowerCount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FollowerCount, err error)
	FindInBatches(result *[]*model.FollowerCount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FollowerCount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFollowerCountDo
	Assign(attrs ...field.AssignExpr) IFollowerCountDo
	Joins(fields ...field.RelationField) IFollowerCountDo
	Preload(fields ...field.RelationField) IFollowerCountDo
	FirstOrInit() (*model.FollowerCount, error)
	FirstOrCreate() (*model.FollowerCount, error)
	FindByPage(offset int, limit int) (result []*model.FollowerCount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFollowerCountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f followerCountDo) Debug() IFollowerCountDo {
	return f.withDO(f.DO.Debug())
}

func (f followerCountDo) WithContext(ctx context.Context) IFollowerCountDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f followerCountDo) ReadDB() IFollowerCountDo {
	return f.Clauses(dbresolver.Read)
}

func (f followerCountDo) WriteDB() IFollowerCountDo {
	return f.Clauses(dbresolver.Write)
}

func (f followerCountDo) Session(config *gorm.Session) IFollowerCountDo {
	return f.withDO(f.DO.Session(config))
}

func (f followerCountDo) Clauses(conds ...clause.Expression) IFollowerCountDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f followerCountDo) Returning(value interface{}, columns ...string) IFollowerCountDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f followerCountDo) Not(conds ...gen.Condition) IFollowerCountDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f followerCountDo) Or(conds ...gen.Condition) IFollowerCountDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f followerCountDo) Select(conds ...field.Expr) IFollowerCountDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f followerCountDo) Where(conds ...gen.Condition) IFollowerCountDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f followerCountDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFollowerCountDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f followerCountDo) Order(conds ...field.Expr) IFollowerCountDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f followerCountDo) Distinct(cols ...field.Expr) IFollowerCountDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f followerCountDo) Omit(cols ...field.Expr) IFollowerCountDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f followerCountDo) Join(table schema.Tabler, on ...field.Expr) IFollowerCountDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f followerCountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFollowerCountDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f followerCountDo) RightJoin(table schema.Tabler, on ...field.Expr) IFollowerCountDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f followerCountDo) Group(cols ...field.Expr) IFollowerCountDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f followerCountDo) Having(conds ...gen.Condition) IFollowerCountDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f followerCountDo) Limit(limit int) IFollowerCountDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f followerCountDo) Offset(offset int) IFollowerCountDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f followerCountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFollowerCountDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f followerCountDo) Unscoped() IFollowerCountDo {
	return f.withDO(f.DO.Unscoped())
}

func (f followerCountDo) Create(values ...*model.FollowerCount) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f followerCountDo) CreateInBatches(values []*model.FollowerCount, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f followerCountDo) Save(values ...*model.FollowerCount) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f followerCountDo) First() (*model.FollowerCount, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowerCount), nil
	}
}

func (f followerCountDo) Take() (*model.FollowerCount, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowerCount), nil
	}
}

func (f followerCountDo) Last() (*model.FollowerCount, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowerCount), nil
	}
}

func (f followerCountDo) Find() ([]*model.FollowerCount, error) {
	result, err := f.DO.Find()
	return result.([]*model.FollowerCount), err
}

func (f followerCountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FollowerCount, err error) {
	buf := make([]*model.FollowerCount, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f followerCountDo) FindInBatches(result *[]*model.FollowerCount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f followerCountDo) Attrs(attrs ...field.AssignExpr) IFollowerCountDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f followerCountDo) Assign(attrs ...field.AssignExpr) IFollowerCountDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f followerCountDo) Joins(fields ...field.RelationField) IFollowerCountDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f followerCountDo) Preload(fields ...field.RelationField) IFollowerCountDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f followerCountDo) FirstOrInit() (*model.FollowerCount, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowerCount), nil
	}
}

func (f followerCountDo) FirstOrCreate() (*model.FollowerCount, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowerCount), nil
	}
}

func (f followerCountDo) FindByPage(offset int, limit int) (result []*model.FollowerCount, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f followerCountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f followerCountDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f followerCountDo) Delete(models ...*model.FollowerCount) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *followerCountDo) withDO(do gen.Dao) *followerCountDo {
	f.DO = *do.(*gen.DO)
	return f
}
