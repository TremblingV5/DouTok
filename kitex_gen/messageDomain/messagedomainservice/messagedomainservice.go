// Code generated by Kitex v0.4.4. DO NOT EDIT.

package messagedomainservice

import (
	"context"
	"fmt"
	messageDomain "github.com/TremblingV5/DouTok/kitex_gen/messageDomain"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageDomainServiceServiceInfo
}

var messageDomainServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageDomainService"
	handlerType := (*messageDomain.MessageDomainService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddMessage":  kitex.NewMethodInfo(addMessageHandler, newAddMessageArgs, newAddMessageResult, false),
		"ListMessage": kitex.NewMethodInfo(listMessageHandler, newListMessageArgs, newListMessageResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "messageDomain",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func addMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(messageDomain.DoutokAddMessageRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(messageDomain.MessageDomainService).AddMessage(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddMessageArgs:
		success, err := handler.(messageDomain.MessageDomainService).AddMessage(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddMessageResult)
		realResult.Success = success
	}
	return nil
}
func newAddMessageArgs() interface{} {
	return &AddMessageArgs{}
}

func newAddMessageResult() interface{} {
	return &AddMessageResult{}
}

type AddMessageArgs struct {
	Req *messageDomain.DoutokAddMessageRequest
}

func (p *AddMessageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(messageDomain.DoutokAddMessageRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddMessageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddMessageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddMessageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddMessageArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddMessageArgs) Unmarshal(in []byte) error {
	msg := new(messageDomain.DoutokAddMessageRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddMessageArgs_Req_DEFAULT *messageDomain.DoutokAddMessageRequest

func (p *AddMessageArgs) GetReq() *messageDomain.DoutokAddMessageRequest {
	if !p.IsSetReq() {
		return AddMessageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

type AddMessageResult struct {
	Success *messageDomain.DoutokAddMessageResponse
}

var AddMessageResult_Success_DEFAULT *messageDomain.DoutokAddMessageResponse

func (p *AddMessageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(messageDomain.DoutokAddMessageResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddMessageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddMessageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddMessageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddMessageResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddMessageResult) Unmarshal(in []byte) error {
	msg := new(messageDomain.DoutokAddMessageResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddMessageResult) GetSuccess() *messageDomain.DoutokAddMessageResponse {
	if !p.IsSetSuccess() {
		return AddMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*messageDomain.DoutokAddMessageResponse)
}

func (p *AddMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func listMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(messageDomain.DoutokListMessageRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(messageDomain.MessageDomainService).ListMessage(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListMessageArgs:
		success, err := handler.(messageDomain.MessageDomainService).ListMessage(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListMessageResult)
		realResult.Success = success
	}
	return nil
}
func newListMessageArgs() interface{} {
	return &ListMessageArgs{}
}

func newListMessageResult() interface{} {
	return &ListMessageResult{}
}

type ListMessageArgs struct {
	Req *messageDomain.DoutokListMessageRequest
}

func (p *ListMessageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(messageDomain.DoutokListMessageRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListMessageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListMessageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListMessageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListMessageArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListMessageArgs) Unmarshal(in []byte) error {
	msg := new(messageDomain.DoutokListMessageRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListMessageArgs_Req_DEFAULT *messageDomain.DoutokListMessageRequest

func (p *ListMessageArgs) GetReq() *messageDomain.DoutokListMessageRequest {
	if !p.IsSetReq() {
		return ListMessageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

type ListMessageResult struct {
	Success *messageDomain.DoutokListMessageResponse
}

var ListMessageResult_Success_DEFAULT *messageDomain.DoutokListMessageResponse

func (p *ListMessageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(messageDomain.DoutokListMessageResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListMessageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListMessageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListMessageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListMessageResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListMessageResult) Unmarshal(in []byte) error {
	msg := new(messageDomain.DoutokListMessageResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListMessageResult) GetSuccess() *messageDomain.DoutokListMessageResponse {
	if !p.IsSetSuccess() {
		return ListMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*messageDomain.DoutokListMessageResponse)
}

func (p *ListMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddMessage(ctx context.Context, Req *messageDomain.DoutokAddMessageRequest) (r *messageDomain.DoutokAddMessageResponse, err error) {
	var _args AddMessageArgs
	_args.Req = Req
	var _result AddMessageResult
	if err = p.c.Call(ctx, "AddMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListMessage(ctx context.Context, Req *messageDomain.DoutokListMessageRequest) (r *messageDomain.DoutokListMessageResponse, err error) {
	var _args ListMessageArgs
	_args.Req = Req
	var _result ListMessageResult
	if err = p.c.Call(ctx, "ListMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
