// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: favoriteDomain.proto

package favoriteDomain

import (
	context "context"
	entity "github.com/TremblingV5/DouTok/kitex_gen/entity"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DoutokAddFavRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VideoId int64 `protobuf:"varint,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *DoutokAddFavRequest) Reset() {
	*x = DoutokAddFavRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteDomain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokAddFavRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokAddFavRequest) ProtoMessage() {}

func (x *DoutokAddFavRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteDomain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokAddFavRequest.ProtoReflect.Descriptor instead.
func (*DoutokAddFavRequest) Descriptor() ([]byte, []int) {
	return file_favoriteDomain_proto_rawDescGZIP(), []int{0}
}

func (x *DoutokAddFavRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DoutokAddFavRequest) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

type DoutokAddFavResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
}

func (x *DoutokAddFavResponse) Reset() {
	*x = DoutokAddFavResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteDomain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokAddFavResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokAddFavResponse) ProtoMessage() {}

func (x *DoutokAddFavResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteDomain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokAddFavResponse.ProtoReflect.Descriptor instead.
func (*DoutokAddFavResponse) Descriptor() ([]byte, []int) {
	return file_favoriteDomain_proto_rawDescGZIP(), []int{1}
}

func (x *DoutokAddFavResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *DoutokAddFavResponse) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

type DoutokRmFavRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VideoId int64 `protobuf:"varint,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *DoutokRmFavRequest) Reset() {
	*x = DoutokRmFavRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteDomain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokRmFavRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokRmFavRequest) ProtoMessage() {}

func (x *DoutokRmFavRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteDomain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokRmFavRequest.ProtoReflect.Descriptor instead.
func (*DoutokRmFavRequest) Descriptor() ([]byte, []int) {
	return file_favoriteDomain_proto_rawDescGZIP(), []int{2}
}

func (x *DoutokRmFavRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DoutokRmFavRequest) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

type DoutokRmFavResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
}

func (x *DoutokRmFavResponse) Reset() {
	*x = DoutokRmFavResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteDomain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokRmFavResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokRmFavResponse) ProtoMessage() {}

func (x *DoutokRmFavResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteDomain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokRmFavResponse.ProtoReflect.Descriptor instead.
func (*DoutokRmFavResponse) Descriptor() ([]byte, []int) {
	return file_favoriteDomain_proto_rawDescGZIP(), []int{3}
}

func (x *DoutokRmFavResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *DoutokRmFavResponse) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

type DoutokListFavRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DoutokListFavRequest) Reset() {
	*x = DoutokListFavRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteDomain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokListFavRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokListFavRequest) ProtoMessage() {}

func (x *DoutokListFavRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteDomain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokListFavRequest.ProtoReflect.Descriptor instead.
func (*DoutokListFavRequest) Descriptor() ([]byte, []int) {
	return file_favoriteDomain_proto_rawDescGZIP(), []int{4}
}

func (x *DoutokListFavRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type DoutokListFavResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32           `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string          `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	VideoList  []*entity.Video `protobuf:"bytes,3,rep,name=video_list,json=videoList,proto3" json:"video_list,omitempty"`
}

func (x *DoutokListFavResponse) Reset() {
	*x = DoutokListFavResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteDomain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokListFavResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokListFavResponse) ProtoMessage() {}

func (x *DoutokListFavResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteDomain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokListFavResponse.ProtoReflect.Descriptor instead.
func (*DoutokListFavResponse) Descriptor() ([]byte, []int) {
	return file_favoriteDomain_proto_rawDescGZIP(), []int{5}
}

func (x *DoutokListFavResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *DoutokListFavResponse) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *DoutokListFavResponse) GetVideoList() []*entity.Video {
	if x != nil {
		return x.VideoList
	}
	return nil
}

type DoutokIsFavRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VideoId []int64 `protobuf:"varint,2,rep,packed,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *DoutokIsFavRequest) Reset() {
	*x = DoutokIsFavRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteDomain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokIsFavRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokIsFavRequest) ProtoMessage() {}

func (x *DoutokIsFavRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteDomain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokIsFavRequest.ProtoReflect.Descriptor instead.
func (*DoutokIsFavRequest) Descriptor() ([]byte, []int) {
	return file_favoriteDomain_proto_rawDescGZIP(), []int{6}
}

func (x *DoutokIsFavRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DoutokIsFavRequest) GetVideoId() []int64 {
	if x != nil {
		return x.VideoId
	}
	return nil
}

type DoutokIsFavResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32          `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string         `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	IsFav      map[int64]bool `protobuf:"bytes,3,rep,name=is_fav,json=isFav,proto3" json:"is_fav,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DoutokIsFavResponse) Reset() {
	*x = DoutokIsFavResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteDomain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokIsFavResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokIsFavResponse) ProtoMessage() {}

func (x *DoutokIsFavResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteDomain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokIsFavResponse.ProtoReflect.Descriptor instead.
func (*DoutokIsFavResponse) Descriptor() ([]byte, []int) {
	return file_favoriteDomain_proto_rawDescGZIP(), []int{7}
}

func (x *DoutokIsFavResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *DoutokIsFavResponse) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *DoutokIsFavResponse) GetIsFav() map[int64]bool {
	if x != nil {
		return x.IsFav
	}
	return nil
}

type DoutokCountFavRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdList []int64 `protobuf:"varint,1,rep,packed,name=user_id_list,json=userIdList,proto3" json:"user_id_list,omitempty"`
}

func (x *DoutokCountFavRequest) Reset() {
	*x = DoutokCountFavRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteDomain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokCountFavRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokCountFavRequest) ProtoMessage() {}

func (x *DoutokCountFavRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteDomain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokCountFavRequest.ProtoReflect.Descriptor instead.
func (*DoutokCountFavRequest) Descriptor() ([]byte, []int) {
	return file_favoriteDomain_proto_rawDescGZIP(), []int{8}
}

func (x *DoutokCountFavRequest) GetUserIdList() []int64 {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

type DoutokCountFavResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32           `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string          `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	CountFav   map[int64]int64 `protobuf:"bytes,3,rep,name=count_fav,json=countFav,proto3" json:"count_fav,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DoutokCountFavResponse) Reset() {
	*x = DoutokCountFavResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteDomain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokCountFavResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokCountFavResponse) ProtoMessage() {}

func (x *DoutokCountFavResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteDomain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokCountFavResponse.ProtoReflect.Descriptor instead.
func (*DoutokCountFavResponse) Descriptor() ([]byte, []int) {
	return file_favoriteDomain_proto_rawDescGZIP(), []int{9}
}

func (x *DoutokCountFavResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *DoutokCountFavResponse) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *DoutokCountFavResponse) GetCountFav() map[int64]int64 {
	if x != nil {
		return x.CountFav
	}
	return nil
}

var File_favoriteDomain_proto protoreflect.FileDescriptor

var file_favoriteDomain_proto_rawDesc = []byte{
	0x0a, 0x14, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x16, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x61,
	0x64, 0x64, 0x5f, 0x66, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x49, 0x64, 0x22, 0x59, 0x0a, 0x17, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x61, 0x64, 0x64,
	0x5f, 0x66, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x22, 0x4b, 0x0a,
	0x15, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x76, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x16, 0x64, 0x6f,
	0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x73, 0x67, 0x22, 0x32, 0x0a, 0x17, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x64, 0x6f, 0x75,
	0x74, 0x6f, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x15, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x69, 0x73,
	0x5f, 0x66, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64,
	0x22, 0xdc, 0x01, 0x0a, 0x16, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x69, 0x73, 0x5f, 0x66,
	0x61, 0x76, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x48, 0x0a, 0x06, 0x69,
	0x73, 0x5f, 0x66, 0x61, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x6f, 0x75,
	0x74, 0x6f, 0x6b, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x49, 0x73, 0x46, 0x61, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x69, 0x73, 0x46, 0x61, 0x76, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x61, 0x76, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x3c, 0x0a, 0x18, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x66, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xee, 0x01,
	0x0a, 0x19, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66,
	0x61, 0x76, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x54, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x76,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x61, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61,
	0x76, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61, 0x76, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xfa,
	0x03, 0x0a, 0x15, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x66, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x61, 0x76, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x52, 0x6d, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x72,
	0x6d, 0x5f, 0x66, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64,
	0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x69,
	0x73, 0x5f, 0x66, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64,
	0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66,
	0x61, 0x76, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x38, 0x5a, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x72, 0x65, 0x6d, 0x62, 0x6c,
	0x69, 0x6e, 0x67, 0x56, 0x35, 0x2f, 0x44, 0x6f, 0x75, 0x54, 0x6f, 0x6b, 0x2f, 0x6b, 0x69, 0x74,
	0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_favoriteDomain_proto_rawDescOnce sync.Once
	file_favoriteDomain_proto_rawDescData = file_favoriteDomain_proto_rawDesc
)

func file_favoriteDomain_proto_rawDescGZIP() []byte {
	file_favoriteDomain_proto_rawDescOnce.Do(func() {
		file_favoriteDomain_proto_rawDescData = protoimpl.X.CompressGZIP(file_favoriteDomain_proto_rawDescData)
	})
	return file_favoriteDomain_proto_rawDescData
}

var file_favoriteDomain_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_favoriteDomain_proto_goTypes = []interface{}{
	(*DoutokAddFavRequest)(nil),    // 0: favoriteDomain.doutok_add_fav_request
	(*DoutokAddFavResponse)(nil),   // 1: favoriteDomain.doutok_add_fav_response
	(*DoutokRmFavRequest)(nil),     // 2: favoriteDomain.doutok_rm_fav_request
	(*DoutokRmFavResponse)(nil),    // 3: favoriteDomain.doutok_rm_fav_response
	(*DoutokListFavRequest)(nil),   // 4: favoriteDomain.doutok_list_fav_request
	(*DoutokListFavResponse)(nil),  // 5: favoriteDomain.doutok_list_fav_response
	(*DoutokIsFavRequest)(nil),     // 6: favoriteDomain.doutok_is_fav_request
	(*DoutokIsFavResponse)(nil),    // 7: favoriteDomain.doutok_is_fav_response
	(*DoutokCountFavRequest)(nil),  // 8: favoriteDomain.doutok_count_fav_request
	(*DoutokCountFavResponse)(nil), // 9: favoriteDomain.doutok_count_fav_response
	nil,                            // 10: favoriteDomain.doutok_is_fav_response.IsFavEntry
	nil,                            // 11: favoriteDomain.doutok_count_fav_response.CountFavEntry
	(*entity.Video)(nil),           // 12: entity.Video
}
var file_favoriteDomain_proto_depIdxs = []int32{
	12, // 0: favoriteDomain.doutok_list_fav_response.video_list:type_name -> entity.Video
	10, // 1: favoriteDomain.doutok_is_fav_response.is_fav:type_name -> favoriteDomain.doutok_is_fav_response.IsFavEntry
	11, // 2: favoriteDomain.doutok_count_fav_response.count_fav:type_name -> favoriteDomain.doutok_count_fav_response.CountFavEntry
	0,  // 3: favoriteDomain.FavoriteDomainService.AddFavorite:input_type -> favoriteDomain.doutok_add_fav_request
	2,  // 4: favoriteDomain.FavoriteDomainService.RmFavorite:input_type -> favoriteDomain.doutok_rm_fav_request
	4,  // 5: favoriteDomain.FavoriteDomainService.ListFavorite:input_type -> favoriteDomain.doutok_list_fav_request
	6,  // 6: favoriteDomain.FavoriteDomainService.IsFavorite:input_type -> favoriteDomain.doutok_is_fav_request
	8,  // 7: favoriteDomain.FavoriteDomainService.CountFavorite:input_type -> favoriteDomain.doutok_count_fav_request
	1,  // 8: favoriteDomain.FavoriteDomainService.AddFavorite:output_type -> favoriteDomain.doutok_add_fav_response
	3,  // 9: favoriteDomain.FavoriteDomainService.RmFavorite:output_type -> favoriteDomain.doutok_rm_fav_response
	5,  // 10: favoriteDomain.FavoriteDomainService.ListFavorite:output_type -> favoriteDomain.doutok_list_fav_response
	7,  // 11: favoriteDomain.FavoriteDomainService.IsFavorite:output_type -> favoriteDomain.doutok_is_fav_response
	9,  // 12: favoriteDomain.FavoriteDomainService.CountFavorite:output_type -> favoriteDomain.doutok_count_fav_response
	8,  // [8:13] is the sub-list for method output_type
	3,  // [3:8] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_favoriteDomain_proto_init() }
func file_favoriteDomain_proto_init() {
	if File_favoriteDomain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_favoriteDomain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokAddFavRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteDomain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokAddFavResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteDomain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokRmFavRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteDomain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokRmFavResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteDomain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokListFavRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteDomain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokListFavResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteDomain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokIsFavRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteDomain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokIsFavResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteDomain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokCountFavRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteDomain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokCountFavResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_favoriteDomain_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_favoriteDomain_proto_goTypes,
		DependencyIndexes: file_favoriteDomain_proto_depIdxs,
		MessageInfos:      file_favoriteDomain_proto_msgTypes,
	}.Build()
	File_favoriteDomain_proto = out.File
	file_favoriteDomain_proto_rawDesc = nil
	file_favoriteDomain_proto_goTypes = nil
	file_favoriteDomain_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.4.4. DO NOT EDIT.

type FavoriteDomainService interface {
	AddFavorite(ctx context.Context, req *DoutokAddFavRequest) (res *DoutokAddFavResponse, err error)
	RmFavorite(ctx context.Context, req *DoutokRmFavRequest) (res *DoutokRmFavResponse, err error)
	ListFavorite(ctx context.Context, req *DoutokListFavRequest) (res *DoutokListFavResponse, err error)
	IsFavorite(ctx context.Context, req *DoutokIsFavRequest) (res *DoutokIsFavResponse, err error)
	CountFavorite(ctx context.Context, req *DoutokCountFavRequest) (res *DoutokCountFavResponse, err error)
}
