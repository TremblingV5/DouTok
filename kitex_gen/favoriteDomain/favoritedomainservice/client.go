// Code generated by Kitex v0.4.4. DO NOT EDIT.

package favoritedomainservice

import (
	"context"
	favoriteDomain "github.com/TremblingV5/DouTok/kitex_gen/favoriteDomain"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	AddFavorite(ctx context.Context, Req *favoriteDomain.DoutokAddFavRequest, callOptions ...callopt.Option) (r *favoriteDomain.DoutokAddFavResponse, err error)
	RmFavorite(ctx context.Context, Req *favoriteDomain.DoutokRmFavRequest, callOptions ...callopt.Option) (r *favoriteDomain.DoutokRmFavResponse, err error)
	ListFavorite(ctx context.Context, Req *favoriteDomain.DoutokListFavRequest, callOptions ...callopt.Option) (r *favoriteDomain.DoutokListFavResponse, err error)
	IsFavorite(ctx context.Context, Req *favoriteDomain.DoutokIsFavRequest, callOptions ...callopt.Option) (r *favoriteDomain.DoutokIsFavResponse, err error)
	CountFavorite(ctx context.Context, Req *favoriteDomain.DoutokCountFavRequest, callOptions ...callopt.Option) (r *favoriteDomain.DoutokCountFavResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kFavoriteDomainServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kFavoriteDomainServiceClient struct {
	*kClient
}

func (p *kFavoriteDomainServiceClient) AddFavorite(ctx context.Context, Req *favoriteDomain.DoutokAddFavRequest, callOptions ...callopt.Option) (r *favoriteDomain.DoutokAddFavResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddFavorite(ctx, Req)
}

func (p *kFavoriteDomainServiceClient) RmFavorite(ctx context.Context, Req *favoriteDomain.DoutokRmFavRequest, callOptions ...callopt.Option) (r *favoriteDomain.DoutokRmFavResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RmFavorite(ctx, Req)
}

func (p *kFavoriteDomainServiceClient) ListFavorite(ctx context.Context, Req *favoriteDomain.DoutokListFavRequest, callOptions ...callopt.Option) (r *favoriteDomain.DoutokListFavResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListFavorite(ctx, Req)
}

func (p *kFavoriteDomainServiceClient) IsFavorite(ctx context.Context, Req *favoriteDomain.DoutokIsFavRequest, callOptions ...callopt.Option) (r *favoriteDomain.DoutokIsFavResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IsFavorite(ctx, Req)
}

func (p *kFavoriteDomainServiceClient) CountFavorite(ctx context.Context, Req *favoriteDomain.DoutokCountFavRequest, callOptions ...callopt.Option) (r *favoriteDomain.DoutokCountFavResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CountFavorite(ctx, Req)
}
