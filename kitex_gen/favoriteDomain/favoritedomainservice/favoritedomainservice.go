// Code generated by Kitex v0.4.4. DO NOT EDIT.

package favoritedomainservice

import (
	"context"
	"fmt"
	favoriteDomain "github.com/TremblingV5/DouTok/kitex_gen/favoriteDomain"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteDomainServiceServiceInfo
}

var favoriteDomainServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteDomainService"
	handlerType := (*favoriteDomain.FavoriteDomainService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddFavorite":   kitex.NewMethodInfo(addFavoriteHandler, newAddFavoriteArgs, newAddFavoriteResult, false),
		"RmFavorite":    kitex.NewMethodInfo(rmFavoriteHandler, newRmFavoriteArgs, newRmFavoriteResult, false),
		"ListFavorite":  kitex.NewMethodInfo(listFavoriteHandler, newListFavoriteArgs, newListFavoriteResult, false),
		"IsFavorite":    kitex.NewMethodInfo(isFavoriteHandler, newIsFavoriteArgs, newIsFavoriteResult, false),
		"CountFavorite": kitex.NewMethodInfo(countFavoriteHandler, newCountFavoriteArgs, newCountFavoriteResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "favoriteDomain",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func addFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(favoriteDomain.DoutokAddFavRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(favoriteDomain.FavoriteDomainService).AddFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddFavoriteArgs:
		success, err := handler.(favoriteDomain.FavoriteDomainService).AddFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newAddFavoriteArgs() interface{} {
	return &AddFavoriteArgs{}
}

func newAddFavoriteResult() interface{} {
	return &AddFavoriteResult{}
}

type AddFavoriteArgs struct {
	Req *favoriteDomain.DoutokAddFavRequest
}

func (p *AddFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(favoriteDomain.DoutokAddFavRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(favoriteDomain.DoutokAddFavRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddFavoriteArgs_Req_DEFAULT *favoriteDomain.DoutokAddFavRequest

func (p *AddFavoriteArgs) GetReq() *favoriteDomain.DoutokAddFavRequest {
	if !p.IsSetReq() {
		return AddFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type AddFavoriteResult struct {
	Success *favoriteDomain.DoutokAddFavResponse
}

var AddFavoriteResult_Success_DEFAULT *favoriteDomain.DoutokAddFavResponse

func (p *AddFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(favoriteDomain.DoutokAddFavResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddFavoriteResult) Unmarshal(in []byte) error {
	msg := new(favoriteDomain.DoutokAddFavResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddFavoriteResult) GetSuccess() *favoriteDomain.DoutokAddFavResponse {
	if !p.IsSetSuccess() {
		return AddFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*favoriteDomain.DoutokAddFavResponse)
}

func (p *AddFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func rmFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(favoriteDomain.DoutokRmFavRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(favoriteDomain.FavoriteDomainService).RmFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RmFavoriteArgs:
		success, err := handler.(favoriteDomain.FavoriteDomainService).RmFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RmFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newRmFavoriteArgs() interface{} {
	return &RmFavoriteArgs{}
}

func newRmFavoriteResult() interface{} {
	return &RmFavoriteResult{}
}

type RmFavoriteArgs struct {
	Req *favoriteDomain.DoutokRmFavRequest
}

func (p *RmFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(favoriteDomain.DoutokRmFavRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RmFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RmFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RmFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RmFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RmFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(favoriteDomain.DoutokRmFavRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RmFavoriteArgs_Req_DEFAULT *favoriteDomain.DoutokRmFavRequest

func (p *RmFavoriteArgs) GetReq() *favoriteDomain.DoutokRmFavRequest {
	if !p.IsSetReq() {
		return RmFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RmFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type RmFavoriteResult struct {
	Success *favoriteDomain.DoutokRmFavResponse
}

var RmFavoriteResult_Success_DEFAULT *favoriteDomain.DoutokRmFavResponse

func (p *RmFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(favoriteDomain.DoutokRmFavResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RmFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RmFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RmFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RmFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RmFavoriteResult) Unmarshal(in []byte) error {
	msg := new(favoriteDomain.DoutokRmFavResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RmFavoriteResult) GetSuccess() *favoriteDomain.DoutokRmFavResponse {
	if !p.IsSetSuccess() {
		return RmFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RmFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*favoriteDomain.DoutokRmFavResponse)
}

func (p *RmFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func listFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(favoriteDomain.DoutokListFavRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(favoriteDomain.FavoriteDomainService).ListFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListFavoriteArgs:
		success, err := handler.(favoriteDomain.FavoriteDomainService).ListFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newListFavoriteArgs() interface{} {
	return &ListFavoriteArgs{}
}

func newListFavoriteResult() interface{} {
	return &ListFavoriteResult{}
}

type ListFavoriteArgs struct {
	Req *favoriteDomain.DoutokListFavRequest
}

func (p *ListFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(favoriteDomain.DoutokListFavRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(favoriteDomain.DoutokListFavRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListFavoriteArgs_Req_DEFAULT *favoriteDomain.DoutokListFavRequest

func (p *ListFavoriteArgs) GetReq() *favoriteDomain.DoutokListFavRequest {
	if !p.IsSetReq() {
		return ListFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type ListFavoriteResult struct {
	Success *favoriteDomain.DoutokListFavResponse
}

var ListFavoriteResult_Success_DEFAULT *favoriteDomain.DoutokListFavResponse

func (p *ListFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(favoriteDomain.DoutokListFavResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListFavoriteResult) Unmarshal(in []byte) error {
	msg := new(favoriteDomain.DoutokListFavResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListFavoriteResult) GetSuccess() *favoriteDomain.DoutokListFavResponse {
	if !p.IsSetSuccess() {
		return ListFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*favoriteDomain.DoutokListFavResponse)
}

func (p *ListFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func isFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(favoriteDomain.DoutokIsFavRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(favoriteDomain.FavoriteDomainService).IsFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IsFavoriteArgs:
		success, err := handler.(favoriteDomain.FavoriteDomainService).IsFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IsFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newIsFavoriteArgs() interface{} {
	return &IsFavoriteArgs{}
}

func newIsFavoriteResult() interface{} {
	return &IsFavoriteResult{}
}

type IsFavoriteArgs struct {
	Req *favoriteDomain.DoutokIsFavRequest
}

func (p *IsFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(favoriteDomain.DoutokIsFavRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IsFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IsFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IsFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in IsFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *IsFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(favoriteDomain.DoutokIsFavRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IsFavoriteArgs_Req_DEFAULT *favoriteDomain.DoutokIsFavRequest

func (p *IsFavoriteArgs) GetReq() *favoriteDomain.DoutokIsFavRequest {
	if !p.IsSetReq() {
		return IsFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IsFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type IsFavoriteResult struct {
	Success *favoriteDomain.DoutokIsFavResponse
}

var IsFavoriteResult_Success_DEFAULT *favoriteDomain.DoutokIsFavResponse

func (p *IsFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(favoriteDomain.DoutokIsFavResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IsFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IsFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IsFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in IsFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *IsFavoriteResult) Unmarshal(in []byte) error {
	msg := new(favoriteDomain.DoutokIsFavResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IsFavoriteResult) GetSuccess() *favoriteDomain.DoutokIsFavResponse {
	if !p.IsSetSuccess() {
		return IsFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IsFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*favoriteDomain.DoutokIsFavResponse)
}

func (p *IsFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func countFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(favoriteDomain.DoutokCountFavRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(favoriteDomain.FavoriteDomainService).CountFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CountFavoriteArgs:
		success, err := handler.(favoriteDomain.FavoriteDomainService).CountFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CountFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newCountFavoriteArgs() interface{} {
	return &CountFavoriteArgs{}
}

func newCountFavoriteResult() interface{} {
	return &CountFavoriteResult{}
}

type CountFavoriteArgs struct {
	Req *favoriteDomain.DoutokCountFavRequest
}

func (p *CountFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(favoriteDomain.DoutokCountFavRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CountFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CountFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CountFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CountFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CountFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(favoriteDomain.DoutokCountFavRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CountFavoriteArgs_Req_DEFAULT *favoriteDomain.DoutokCountFavRequest

func (p *CountFavoriteArgs) GetReq() *favoriteDomain.DoutokCountFavRequest {
	if !p.IsSetReq() {
		return CountFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CountFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type CountFavoriteResult struct {
	Success *favoriteDomain.DoutokCountFavResponse
}

var CountFavoriteResult_Success_DEFAULT *favoriteDomain.DoutokCountFavResponse

func (p *CountFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(favoriteDomain.DoutokCountFavResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CountFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CountFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CountFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CountFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CountFavoriteResult) Unmarshal(in []byte) error {
	msg := new(favoriteDomain.DoutokCountFavResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CountFavoriteResult) GetSuccess() *favoriteDomain.DoutokCountFavResponse {
	if !p.IsSetSuccess() {
		return CountFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CountFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*favoriteDomain.DoutokCountFavResponse)
}

func (p *CountFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddFavorite(ctx context.Context, Req *favoriteDomain.DoutokAddFavRequest) (r *favoriteDomain.DoutokAddFavResponse, err error) {
	var _args AddFavoriteArgs
	_args.Req = Req
	var _result AddFavoriteResult
	if err = p.c.Call(ctx, "AddFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RmFavorite(ctx context.Context, Req *favoriteDomain.DoutokRmFavRequest) (r *favoriteDomain.DoutokRmFavResponse, err error) {
	var _args RmFavoriteArgs
	_args.Req = Req
	var _result RmFavoriteResult
	if err = p.c.Call(ctx, "RmFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListFavorite(ctx context.Context, Req *favoriteDomain.DoutokListFavRequest) (r *favoriteDomain.DoutokListFavResponse, err error) {
	var _args ListFavoriteArgs
	_args.Req = Req
	var _result ListFavoriteResult
	if err = p.c.Call(ctx, "ListFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsFavorite(ctx context.Context, Req *favoriteDomain.DoutokIsFavRequest) (r *favoriteDomain.DoutokIsFavResponse, err error) {
	var _args IsFavoriteArgs
	_args.Req = Req
	var _result IsFavoriteResult
	if err = p.c.Call(ctx, "IsFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CountFavorite(ctx context.Context, Req *favoriteDomain.DoutokCountFavRequest) (r *favoriteDomain.DoutokCountFavResponse, err error) {
	var _args CountFavoriteArgs
	_args.Req = Req
	var _result CountFavoriteResult
	if err = p.c.Call(ctx, "CountFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
