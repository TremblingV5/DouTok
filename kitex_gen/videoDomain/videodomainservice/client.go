// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videodomainservice

import (
	"context"
	entity "github.com/TremblingV5/DouTok/kitex_gen/entity"
	videoDomain "github.com/TremblingV5/DouTok/kitex_gen/videoDomain"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetFeed(ctx context.Context, Req *videoDomain.DoutokGetFeedRequest, callOptions ...callopt.Option) (r *videoDomain.DoutokGetFeedResponse, err error)
	AddPublish(ctx context.Context, Req *videoDomain.DoutokAddPublishRequest, callOptions ...callopt.Option) (r *videoDomain.DoutokAddPublishResponse, err error)
	ListPublish(ctx context.Context, Req *videoDomain.DoutokListPublishRequest, callOptions ...callopt.Option) (r *videoDomain.DoutokListPublishResponse, err error)
	CountPublish(ctx context.Context, Req *videoDomain.DoutokCountPublishRequest, callOptions ...callopt.Option) (r *videoDomain.DoutokCountPublishResponse, err error)
	GetVideoInfo(ctx context.Context, Req *videoDomain.DoutokGetVideoInfoRequest, callOptions ...callopt.Option) (r *entity.Video, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoDomainServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoDomainServiceClient struct {
	*kClient
}

func (p *kVideoDomainServiceClient) GetFeed(ctx context.Context, Req *videoDomain.DoutokGetFeedRequest, callOptions ...callopt.Option) (r *videoDomain.DoutokGetFeedResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFeed(ctx, Req)
}

func (p *kVideoDomainServiceClient) AddPublish(ctx context.Context, Req *videoDomain.DoutokAddPublishRequest, callOptions ...callopt.Option) (r *videoDomain.DoutokAddPublishResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddPublish(ctx, Req)
}

func (p *kVideoDomainServiceClient) ListPublish(ctx context.Context, Req *videoDomain.DoutokListPublishRequest, callOptions ...callopt.Option) (r *videoDomain.DoutokListPublishResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListPublish(ctx, Req)
}

func (p *kVideoDomainServiceClient) CountPublish(ctx context.Context, Req *videoDomain.DoutokCountPublishRequest, callOptions ...callopt.Option) (r *videoDomain.DoutokCountPublishResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CountPublish(ctx, Req)
}

func (p *kVideoDomainServiceClient) GetVideoInfo(ctx context.Context, Req *videoDomain.DoutokGetVideoInfoRequest, callOptions ...callopt.Option) (r *entity.Video, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoInfo(ctx, Req)
}
