// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: commentDomain.proto

package commentDomain

import (
	context "context"
	entity "github.com/TremblingV5/DouTok/kitex_gen/entity"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DoutokAddCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId     int64  `protobuf:"varint,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	UserId      int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CommentText string `protobuf:"bytes,3,opt,name=comment_text,json=commentText,proto3" json:"comment_text,omitempty"`
}

func (x *DoutokAddCommentReq) Reset() {
	*x = DoutokAddCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commentDomain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokAddCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokAddCommentReq) ProtoMessage() {}

func (x *DoutokAddCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_commentDomain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokAddCommentReq.ProtoReflect.Descriptor instead.
func (*DoutokAddCommentReq) Descriptor() ([]byte, []int) {
	return file_commentDomain_proto_rawDescGZIP(), []int{0}
}

func (x *DoutokAddCommentReq) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *DoutokAddCommentReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DoutokAddCommentReq) GetCommentText() string {
	if x != nil {
		return x.CommentText
	}
	return ""
}

type DoutokAddCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32           `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string          `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	Comment    *entity.Comment `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *DoutokAddCommentResp) Reset() {
	*x = DoutokAddCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commentDomain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokAddCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokAddCommentResp) ProtoMessage() {}

func (x *DoutokAddCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_commentDomain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokAddCommentResp.ProtoReflect.Descriptor instead.
func (*DoutokAddCommentResp) Descriptor() ([]byte, []int) {
	return file_commentDomain_proto_rawDescGZIP(), []int{1}
}

func (x *DoutokAddCommentResp) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *DoutokAddCommentResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *DoutokAddCommentResp) GetComment() *entity.Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type DoutokRmCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VideoId   int64 `protobuf:"varint,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	CommentId int64 `protobuf:"varint,3,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
}

func (x *DoutokRmCommentReq) Reset() {
	*x = DoutokRmCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commentDomain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokRmCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokRmCommentReq) ProtoMessage() {}

func (x *DoutokRmCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_commentDomain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokRmCommentReq.ProtoReflect.Descriptor instead.
func (*DoutokRmCommentReq) Descriptor() ([]byte, []int) {
	return file_commentDomain_proto_rawDescGZIP(), []int{2}
}

func (x *DoutokRmCommentReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DoutokRmCommentReq) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *DoutokRmCommentReq) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

type DoutokListCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId int64 `protobuf:"varint,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	UserId  int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DoutokListCommentReq) Reset() {
	*x = DoutokListCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commentDomain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokListCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokListCommentReq) ProtoMessage() {}

func (x *DoutokListCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_commentDomain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokListCommentReq.ProtoReflect.Descriptor instead.
func (*DoutokListCommentReq) Descriptor() ([]byte, []int) {
	return file_commentDomain_proto_rawDescGZIP(), []int{3}
}

func (x *DoutokListCommentReq) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *DoutokListCommentReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type DoutokListCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode  int32             `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg   string            `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	CommentList []*entity.Comment `protobuf:"bytes,3,rep,name=comment_list,json=commentList,proto3" json:"comment_list,omitempty"`
}

func (x *DoutokListCommentResp) Reset() {
	*x = DoutokListCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commentDomain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokListCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokListCommentResp) ProtoMessage() {}

func (x *DoutokListCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_commentDomain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokListCommentResp.ProtoReflect.Descriptor instead.
func (*DoutokListCommentResp) Descriptor() ([]byte, []int) {
	return file_commentDomain_proto_rawDescGZIP(), []int{4}
}

func (x *DoutokListCommentResp) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *DoutokListCommentResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *DoutokListCommentResp) GetCommentList() []*entity.Comment {
	if x != nil {
		return x.CommentList
	}
	return nil
}

type DoutokCountCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoIdList []int64 `protobuf:"varint,1,rep,packed,name=video_id_list,json=videoIdList,proto3" json:"video_id_list,omitempty"`
}

func (x *DoutokCountCommentReq) Reset() {
	*x = DoutokCountCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commentDomain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokCountCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokCountCommentReq) ProtoMessage() {}

func (x *DoutokCountCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_commentDomain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokCountCommentReq.ProtoReflect.Descriptor instead.
func (*DoutokCountCommentReq) Descriptor() ([]byte, []int) {
	return file_commentDomain_proto_rawDescGZIP(), []int{5}
}

func (x *DoutokCountCommentReq) GetVideoIdList() []int64 {
	if x != nil {
		return x.VideoIdList
	}
	return nil
}

type DoutokCountCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode   int32           `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg    string          `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	CommentCount map[int64]int64 `protobuf:"bytes,3,rep,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DoutokCountCommentResp) Reset() {
	*x = DoutokCountCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commentDomain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoutokCountCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoutokCountCommentResp) ProtoMessage() {}

func (x *DoutokCountCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_commentDomain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoutokCountCommentResp.ProtoReflect.Descriptor instead.
func (*DoutokCountCommentResp) Descriptor() ([]byte, []int) {
	return file_commentDomain_proto_rawDescGZIP(), []int{6}
}

func (x *DoutokCountCommentResp) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *DoutokCountCommentResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *DoutokCountCommentResp) GetCommentCount() map[int64]int64 {
	if x != nil {
		return x.CommentCount
	}
	return nil
}

var File_commentDomain_proto protoreflect.FileDescriptor

var file_commentDomain_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x16, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x61, 0x64, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x17, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x61,
	0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12,
	0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x6a, 0x0a, 0x15, 0x64, 0x6f,
	0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x17, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x18, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x73, 0x67, 0x12, 0x32, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x18, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x19, 0x64, 0x6f, 0x75, 0x74, 0x6f,
	0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x73, 0x67, 0x12, 0x5f, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x6f, 0x75, 0x74,
	0x6f, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x91, 0x03, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x5b, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x6f,
	0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x09,
	0x52, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b,
	0x5f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64,
	0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x6f, 0x75, 0x74, 0x6f, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x72, 0x65, 0x6d, 0x62, 0x6c, 0x69,
	0x6e, 0x67, 0x56, 0x35, 0x2f, 0x44, 0x6f, 0x75, 0x54, 0x6f, 0x6b, 0x2f, 0x6b, 0x69, 0x74, 0x65,
	0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commentDomain_proto_rawDescOnce sync.Once
	file_commentDomain_proto_rawDescData = file_commentDomain_proto_rawDesc
)

func file_commentDomain_proto_rawDescGZIP() []byte {
	file_commentDomain_proto_rawDescOnce.Do(func() {
		file_commentDomain_proto_rawDescData = protoimpl.X.CompressGZIP(file_commentDomain_proto_rawDescData)
	})
	return file_commentDomain_proto_rawDescData
}

var file_commentDomain_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_commentDomain_proto_goTypes = []interface{}{
	(*DoutokAddCommentReq)(nil),    // 0: commentDomain.doutok_add_comment_req
	(*DoutokAddCommentResp)(nil),   // 1: commentDomain.doutok_add_comment_resp
	(*DoutokRmCommentReq)(nil),     // 2: commentDomain.doutok_rm_comment_req
	(*DoutokListCommentReq)(nil),   // 3: commentDomain.doutok_list_comment_req
	(*DoutokListCommentResp)(nil),  // 4: commentDomain.doutok_list_comment_resp
	(*DoutokCountCommentReq)(nil),  // 5: commentDomain.doutok_count_comment_req
	(*DoutokCountCommentResp)(nil), // 6: commentDomain.doutok_count_comment_resp
	nil,                            // 7: commentDomain.doutok_count_comment_resp.CommentCountEntry
	(*entity.Comment)(nil),         // 8: entity.Comment
}
var file_commentDomain_proto_depIdxs = []int32{
	8, // 0: commentDomain.doutok_add_comment_resp.comment:type_name -> entity.Comment
	8, // 1: commentDomain.doutok_list_comment_resp.comment_list:type_name -> entity.Comment
	7, // 2: commentDomain.doutok_count_comment_resp.comment_count:type_name -> commentDomain.doutok_count_comment_resp.CommentCountEntry
	0, // 3: commentDomain.CommentDomainService.AddComment:input_type -> commentDomain.doutok_add_comment_req
	2, // 4: commentDomain.CommentDomainService.RmComment:input_type -> commentDomain.doutok_rm_comment_req
	3, // 5: commentDomain.CommentDomainService.ListComment:input_type -> commentDomain.doutok_list_comment_req
	5, // 6: commentDomain.CommentDomainService.CountComment:input_type -> commentDomain.doutok_count_comment_req
	1, // 7: commentDomain.CommentDomainService.AddComment:output_type -> commentDomain.doutok_add_comment_resp
	1, // 8: commentDomain.CommentDomainService.RmComment:output_type -> commentDomain.doutok_add_comment_resp
	4, // 9: commentDomain.CommentDomainService.ListComment:output_type -> commentDomain.doutok_list_comment_resp
	6, // 10: commentDomain.CommentDomainService.CountComment:output_type -> commentDomain.doutok_count_comment_resp
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_commentDomain_proto_init() }
func file_commentDomain_proto_init() {
	if File_commentDomain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_commentDomain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokAddCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commentDomain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokAddCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commentDomain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokRmCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commentDomain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokListCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commentDomain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokListCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commentDomain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokCountCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commentDomain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoutokCountCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commentDomain_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commentDomain_proto_goTypes,
		DependencyIndexes: file_commentDomain_proto_depIdxs,
		MessageInfos:      file_commentDomain_proto_msgTypes,
	}.Build()
	File_commentDomain_proto = out.File
	file_commentDomain_proto_rawDesc = nil
	file_commentDomain_proto_goTypes = nil
	file_commentDomain_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.4.4. DO NOT EDIT.

type CommentDomainService interface {
	AddComment(ctx context.Context, req *DoutokAddCommentReq) (res *DoutokAddCommentResp, err error)
	RmComment(ctx context.Context, req *DoutokRmCommentReq) (res *DoutokAddCommentResp, err error)
	ListComment(ctx context.Context, req *DoutokListCommentReq) (res *DoutokListCommentResp, err error)
	CountComment(ctx context.Context, req *DoutokCountCommentReq) (res *DoutokCountCommentResp, err error)
}
